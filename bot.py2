

import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio

# Set up logging to help with debugging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# Correctly assign your token here
TOKEN = '8093815852:AAEXPNO4g6nB7ifqdgoOzvffW0oz1NFOLsI'  # Replace this with your token

# Command handler functions
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Hi! I am your bot.')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Here are the available commands: /start, /help, /ayah, /dua.')

async def ayah(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Here is an Ayah!')

async def dua(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Here is a Dua!')

# Main function to set up the bot and handle the commands
async def main() -> None:
    # Set up the application with your token
    application = Application.builder().token(TOKEN).build()

    # Add command handlers for each of the commands
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("ayah", ayah))
    application.add_handler(CommandHandler("dua", dua))

    # Start the bot
    await application.run_polling()

# Run the main function if this is the main script
if __name__ == "main":
    try:
        # If there's no running event loop, start the main coroutine
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # If event loop is already running, use asyncio.ensure_future
            asyncio.ensure_future(main())
        else:
            loop.run_until_complete(main())
    except RuntimeError as e:
        if str(e) == 'This event loop is already running':
            # Ensure task is run without starting new loop
            asyncio.ensure_future(main())
        else:
            raise e